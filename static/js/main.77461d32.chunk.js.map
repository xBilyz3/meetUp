{"version":3,"sources":["CitySearch.js","NumberOfEvents.js","Event.js","EventList.js","App.js","serviceWorker.js","index.js"],"names":["CitySearch","state","query","suggestions","handleInputChanged","event","value","target","setState","handleItemClicked","className","type","this","onChange","map","item","onClick","name_string","key","Component","NumberOfEvents","ShownEvents","label","Event","showDetails","handleShowDetails","name","local_date","description","link","EventList","events","id","App","Boolean","window","location","hostname","match","ReactDOM","render","StrictMode","document","getElementById","navigator","serviceWorker","ready","then","registration","unregister","catch","error","console","message"],"mappings":"0NAwCeA,E,4MArCdC,MAAQ,CACPC,MAAO,GACPC,YAAa,I,EAGdC,mBAAqB,SAACC,GACrB,IAAMC,EAAQD,EAAME,OAAOD,MAC3B,EAAKE,SAAS,CAAEN,MAAOI,K,EAGxBG,kBAAoB,SAACH,GACpB,EAAKE,SAAS,CAAEN,MAAOI,K,uDAGd,IAAD,OACR,OACC,yBAAKI,UAAU,cACd,2BACCC,KAAK,OACLD,UAAU,OACVJ,MAAOM,KAAKX,MAAMC,MAClBW,SAAUD,KAAKR,qBAEhB,wBAAIM,UAAU,eACZE,KAAKX,MAAME,YAAYW,KAAI,SAACC,GAAD,OAC3B,wBACCC,QAAS,kBAAM,EAAKP,kBAAkBM,EAAKE,cAC3CC,IAAKH,EAAKE,aACTF,EAAKE,sB,GA7BYE,aCyBVC,E,4MAxBbnB,MAAQ,CACNoB,YAAa,I,EAGfjB,mBAAqB,SAACC,GACpB,IAAMC,EAAQD,EAAME,OAAOD,MAC3B,EAAKE,SAAS,CAAEa,YAAaf,K,uDAI7B,OACE,yBAAKI,UAAU,kBACb,2BACEC,KAAK,SACLD,UAAU,SACVY,MAAM,mBACNhB,MAAOM,KAAKX,MAAMoB,YAClBR,SAAUD,KAAKR,0B,GAlBIe,aCqCdI,E,4MApCdtB,MAAQ,CACPI,MAAO,GACPmB,aAAa,G,EAGdC,kBAAoB,WACnB,EAAKjB,SAAS,CAAEgB,aAAa,K,uDAGpB,IAAD,OACFA,EAAcZ,KAAKX,MAAMuB,YAE/B,OACC,6BACC,yBAAKd,UAAU,SACd,yBAAKA,UAAU,aAAaE,KAAKX,MAAMI,MAAMqB,MAC7C,yBAAKhB,UAAU,aAAaE,KAAKX,MAAMI,MAAMsB,YAC7C,4BACCjB,UAAU,gBACVM,QAAS,kBAAM,EAAKS,sBAFrB,iBAMAD,GACA,yBAAKd,UAAU,gBACd,yBAAKA,UAAU,oBACbE,KAAKX,MAAMI,MAAMuB,aAEnB,yBAAKlB,UAAU,aAAaE,KAAKX,MAAMI,MAAMwB,Y,GA7B/BV,aCmBLW,E,4MAjBd7B,MAAQ,CACP8B,OAAQ,I,uDAIR,OACC,yBAAKrB,UAAU,aACbE,KAAKX,MAAM8B,OAAOjB,KAAI,SAACT,GAAD,OACtB,wBAAIa,IAAKb,EAAM2B,IACd,kBAAC,EAAD,CAAO3B,MAAOA,a,GAVIc,aCmBTc,G,6KAXb,OACC,yBAAKvB,UAAU,OACd,kBAAC,EAAD,MACA,kBAAC,EAAD,MACA,kBAAC,EAAD,MACA,kBAAC,EAAD,W,GAPcS,cCGEe,QACW,cAA7BC,OAAOC,SAASC,UAEe,UAA7BF,OAAOC,SAASC,UAEhBF,OAAOC,SAASC,SAASC,MACvB,2DCZNC,IAASC,OACP,kBAAC,IAAMC,WAAP,KACE,kBAAC,EAAD,OAEFC,SAASC,eAAe,SDyHpB,kBAAmBC,WACrBA,UAAUC,cAAcC,MACrBC,MAAK,SAAAC,GACJA,EAAaC,gBAEdC,OAAM,SAAAC,GACLC,QAAQD,MAAMA,EAAME,a","file":"static/js/main.77461d32.chunk.js","sourcesContent":["import React, { Component } from 'react';\n\nclass CitySearch extends Component {\n\tstate = {\n\t\tquery: '',\n\t\tsuggestions: [],\n\t};\n\n\thandleInputChanged = (event) => {\n\t\tconst value = event.target.value;\n\t\tthis.setState({ query: value });\n\t};\n\n\thandleItemClicked = (value) => {\n\t\tthis.setState({ query: value });\n\t};\n\n\trender() {\n\t\treturn (\n\t\t\t<div className=\"CitySearch\">\n\t\t\t\t<input\n\t\t\t\t\ttype=\"text\"\n\t\t\t\t\tclassName=\"city\"\n\t\t\t\t\tvalue={this.state.query}\n\t\t\t\t\tonChange={this.handleInputChanged}\n\t\t\t\t/>\n\t\t\t\t<ul className=\"suggestions\">\n\t\t\t\t\t{this.state.suggestions.map((item) => (\n\t\t\t\t\t\t<li\n\t\t\t\t\t\t\tonClick={() => this.handleItemClicked(item.name_string)}\n\t\t\t\t\t\t\tkey={item.name_string}>\n\t\t\t\t\t\t\t{item.name_string}\n\t\t\t\t\t\t</li>\n\t\t\t\t\t))}\n\t\t\t\t</ul>\n\t\t\t</div>\n\t\t);\n\t}\n}\n\nexport default CitySearch;\n","import React, { Component } from 'react';\n\nclass NumberOfEvents extends Component {\n  state = {\n    ShownEvents: 32,\n  };\n\n  handleInputChanged = (event) => {\n    const value = event.target.value;\n    this.setState({ ShownEvents: value });\n  };\n\n  render() {\n    return (\n      <div className=\"NumberOfEvents\">\n        <input\n          type=\"number\"\n          className=\"number\"\n          label=\"Number of Events\"\n          value={this.state.ShownEvents}\n          onChange={this.handleInputChanged}\n        />\n      </div>\n    );\n  }\n}\n\nexport default NumberOfEvents;\n","import React, { Component } from 'react';\n\nclass Event extends Component {\n\tstate = {\n\t\tevent: {},\n\t\tshowDetails: false,\n\t};\n\n\thandleShowDetails = () => {\n\t\tthis.setState({ showDetails: true });\n\t};\n\n\trender() {\n\t\tconst showDetails = this.state.showDetails;\n\n\t\treturn (\n\t\t\t<div>\n\t\t\t\t<div className=\"event\">\n\t\t\t\t\t<div className=\"eventName\">{this.state.event.name}</div>\n\t\t\t\t\t<div className=\"eventDate\">{this.state.event.local_date}</div>\n\t\t\t\t\t<button\n\t\t\t\t\t\tclassName=\"detailsButton\"\n\t\t\t\t\t\tonClick={() => this.handleShowDetails()}>\n\t\t\t\t\t\tshow details\n\t\t\t\t\t</button>\n\t\t\t\t</div>\n\t\t\t\t{showDetails && (\n\t\t\t\t\t<div className=\"eventDetails\">\n\t\t\t\t\t\t<div className=\"eventDescription\">\n\t\t\t\t\t\t\t{this.state.event.description}\n\t\t\t\t\t\t</div>\n\t\t\t\t\t\t<div className=\"eventLink\">{this.state.event.link}</div>\n\t\t\t\t\t</div>\n\t\t\t\t)}\n\t\t\t</div>\n\t\t);\n\t}\n}\n\nexport default Event;\n","import React, { Component } from 'react';\nimport Event from './Event';\n\nclass EventList extends Component {\n\tstate = {\n\t\tevents: [],\n\t};\n\n\trender() {\n\t\treturn (\n\t\t\t<div className=\"EventList\">\n\t\t\t\t{this.state.events.map((event) => (\n\t\t\t\t\t<li key={event.id}>\n\t\t\t\t\t\t<Event event={event} />\n\t\t\t\t\t</li>\n\t\t\t\t))}\n\t\t\t</div>\n\t\t);\n\t}\n}\n\nexport default EventList;\n","import React, { Component } from 'react';\nimport CitySearch from './CitySearch';\nimport NumberOfEvents from './NumberOfEvents';\nimport EventList from './EventList';\nimport Event from './Event';\n\n//style\nimport './App.css';\n\nclass App extends Component {\n\trender() {\n\t\treturn (\n\t\t\t<div className=\"App\">\n\t\t\t\t<CitySearch />\n\t\t\t\t<NumberOfEvents />\n\t\t\t\t<EventList />\n\t\t\t\t<Event />\n\t\t\t</div>\n\t\t);\n\t}\n}\n\nexport default App;\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.0/8 are considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl, {\n    headers: { 'Service-Worker': 'script' },\n  })\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready\n      .then(registration => {\n        registration.unregister();\n      })\n      .catch(error => {\n        console.error(error.message);\n      });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport * as serviceWorker from './serviceWorker';\n\nReactDOM.render(\n  <React.StrictMode>\n    <App />\n  </React.StrictMode>,\n  document.getElementById('root')\n);\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}